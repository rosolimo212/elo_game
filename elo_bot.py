# coding: utf-8
# ELO-bot main file
import telebot
from telebot import types

import pandas as pd
import numpy as np
import random

import matplotlib.pyplot as plt
from pylab import rcParams
import seaborn as sns

import schedule
import time

# module for working with SQL
import data_load as dl
settings = dl.read_yaml_config('config.yaml', section='telegram')

topics_dct = {
    '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ': 'is_popular', 
    '–ö–Ω–∏–≥–∏ –ø—Ä–æ –ª—é–±–æ–≤—å': 'is_love',
    '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞': 'is_fantastic',
    '–î–µ—Ç–µ–∫—Ç–∏–≤—ã': 'is_detective',
    '–ö–ª–∞—Å—Å–∏–∫–∞': 'is_classic',
    '–ê–Ω—Ç–∏—É—Ç–æ–ø–∏–∏': 'is_anti',
    '–ö–Ω–∏–≥–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º': 'is_russian',
    '–ö–Ω–∏–≥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º': 'is_english',
            }
topics_lst = list(topics_dct.keys())
topic = ''
battle1 = ''
battle2 = ''
bot = telebot.TeleBot(settings['token'])

# common functions
def data_frame_to_png(df, file_name):
    import matplotlib.pyplot as plt
    from pandas.plotting import table

    plot_df = df.copy()
    
    ax = plt.subplot(111, frame_on=False)
    ax.xaxis.set_visible(False)
    ax.yaxis.set_visible(False)
    plt.subplots_adjust(bottom=0.45, top=1)
    tbl = table(
        ax, 
        plot_df, 
        loc='center',
        rowLoc='left',
        colLoc='left',
        cellLoc='left'
    )
    tbl.set_fontsize(24)
    tbl.scale(3,4)
    plt.savefig(file_name+'.png', bbox_inches='tight')

def sending_alive_message(period_in_seconds):
    while True:
        bot.send_message(chat_id=249792088, text="Bot is stiil alive!")
        time.sleep(period_in_seconds)

# loggin functions
# event log
def make_event_log(message, event_name, params):
    user = message.from_user.username
    user_id = message.from_user.id

    log_lst = [user_id, user, event_name, params]
    log_df = pd.DataFrame([log_lst])
    log_df.columns = ['user_id', 'user_name', 'event_name', 'parameters']
    print(log_df)
    dl.insert_data(log_df, 'tl', 'events')

# battle log
def make_battle_log(message, battle1, battle2, result):
    user = message.from_user.username
    user_id = message.from_user.id

    for_data_load = [battle1, battle2, result, user, user_id]
    battle_df = pd.DataFrame([for_data_load], columns=['battle1', 'battle2', 'result', 'user', 'user_id'])
    print(battle_df)
    dl.insert_data(battle_df, 'tl', 'game_results')

# gaming functions
# return list of pair different items wihouhgt history
def generate_pair(items_list):
    battle1 = random.choice(items_list)
    battle2 = random.choice(items_list)
    if battle1 != battle2: 
        return [battle1, battle2]
    else:
        return generate_pair(items_list)

# return classic Elo propabilities
# elo_prob(2882, 2722) -> 0.7152 (72% chanses Carlsen (2882) to beat Wan Hao (2722))
def count_elo_prob(rw, rb):
    try:
        rw = float(rw)
        rb = float(rb)
        res = 1 / (1 + np.power(10, (rb-rw) / 400))
    except:
        0.5
    return res

# rating changing after game
# simple version
def count_elo_rating_changes(rating, opponent_rating, score):
    K = 20  
    expectation = count_elo_prob(rating, opponent_rating)
    new_rating = rating + K * (score - expectation)
    return np.round(new_rating,0)

def make_ratings(battle1, battle2, result):
    with open('make_rating.sql', 'r') as f:
        query = f.read()

    fresh_ratings_df =  dl.get_data(query)
    print(fresh_ratings_df[0:3])

    old_rating1 = fresh_ratings_df[fresh_ratings_df['item'] == battle1]['rating'].values[0]
    old_rating2 = fresh_ratings_df[fresh_ratings_df['item'] == battle2]['rating'].values[0]

    if result == 0:
        print(battle1, ' won')
        new_rating1 = count_elo_rating_changes(old_rating1, old_rating2, 1)
        new_rating2 = count_elo_rating_changes(old_rating1, old_rating2, 0)
    elif result == 1:
        print(battle2, ' won')
        new_rating1 = count_elo_rating_changes(old_rating1, old_rating2, 0)
        new_rating2 = count_elo_rating_changes(old_rating1, old_rating2, 1)
    else:
        print('Error')


    log_df = pd.DataFrame([[battle1, new_rating1], [battle2, new_rating2]])
    log_df.columns = ['item', 'rating']
    print(log_df)
    dl.insert_data(log_df, 'tl', 'rating_history')

# telegram bot logic
def make_answer_buttons(buttons_lst):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for button in buttons_lst:
        item = types.KeyboardButton(button)
        markup.add(item)
    
    return markup 

def choise_category(bot, message):
    buttons = topics_lst.copy()
    buttons.append('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup = make_answer_buttons(buttons)

    bot.send_message(
            message.chat.id, 
            """
            –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            """,
            reply_markup=markup
                    )
    
def start_game(bot, message, topic):
    items = dl.get_data("""
                    select item_name
                    from tl.items
                    where {slice} = 1
                    """.format(
                        slice = topics_dct[topic]
                              ))['item_name'].values

    battle1, battle2 = generate_pair(items)

    markup = make_answer_buttons([
         battle1,
         battle2,
         '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                                ])

    bot.send_message(
            message.chat.id, 
            """
            –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ
            """,
            reply_markup=markup
                    )
    return topic, battle1, battle2
    
def skip_game(bot, message):
    markup = make_answer_buttons([
         '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
         '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
         '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                ])
    answer = """
–ü—Ä–æ–ø—É—Å—Ç–∏–º, –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
    """

    bot.send_message(
            message.chat.id, 
            answer,
            reply_markup=markup
                    )
    
def finish_game(bot, message, battle1, battle2, result):
    make_ratings(battle1, battle2, result)
    make_battle_log(message, battle1, battle2, result)
    markup = make_answer_buttons([
        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
        '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                ])
    answer = """
üëç
    """

    bot.send_message(
            message.chat.id, 
            answer,
            reply_markup=markup
                    )

def launch_ratings(bot, message):
    with open('top_rating.sql', 'r') as f:
        query = f.read()
    top_rating = dl.get_data(query)

    rcParams['figure.figsize'] = 12, 9
    fig = plt.figure()
    fig = sns.heatmap(
            top_rating.set_index('item'), 
            cmap="RdYlGn", 
            annot=True,
            fmt=".0f",
            center=1600,
            vmin=1500, vmax=1700,
            cbar=False,
            square=True,
            ).figure.savefig("hm.png")
    
    markup = make_answer_buttons([
         '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                ])

    bot.send_message(
            message.chat.id, 
            """
–õ—É—á—à–∏–µ –∫–Ω–∏–≥–∏ –ø–æ –º–Ω–µ–Ω–∏—é –Ω–∞—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.
–ß–µ–º –±–æ–ª—å—à–µ —á–∏—Å–ª–æ (—Ä–µ–π—Ç–∏–Ω–≥), —Ç–µ–º —á–∞—â–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞–ª–∏ —ç—Ç—É –∫–Ω–∏–≥—É
            """,
            reply_markup=markup
                    )
    
    file = open('hm.png', 'rb')
    bot.send_photo(message.chat.id, file, reply_markup=markup)
       
def launch_personal_stat(bot, message):
    user = message.from_user.username
    user_id = message.from_user.id

    with open('score.sql', 'r') as f:
        query = f.read()
    score =  dl.get_data(query.format(
                        uid = user_id
                    ))
    with open('favor.sql', 'r') as f:
        query = f.read()
    favor =  dl.get_data(query.format(
                        uid = user_id
                    ))

    try:
        answer = """
    –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∏–≥—Ä–µ:
        —Å—ã–≥—Ä–∞–Ω–æ "–±–æ—ë–≤" - {games}
        –æ–±—â–∏–π —Å—á—ë—Ç - {score}
        –º–µ—Ä–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –æ—Ä–∏–Ω–∏–Ω–∞–ª—å–Ω–µ–µ) - {original_score}
        –º–µ—Ä–∞ –Ω–µ—Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–µ–π) - {non_random_score}
        –ª—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞ - {book}
        """.format(
            games = score['attemps'].values[0],
            score = score['score'].values[0],
            original_score = score['original_score'].values[0],
            non_random_score = score['non_random_rate'].values[0],
            book = favor['item'].values[0]
        )
    except:
        answer = "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

    markup = make_answer_buttons([
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                    ])

    bot.send_message(
            message.chat.id, 
            answer,
            reply_markup=markup
                    )
       
def launch_leaderboard(bot, message):
    with open('leaderboard.sql', 'r') as f:
        query = f.read()

    lead_df = dl.get_data(query)
    lead_df.columns = ['–ò–≥—Ä–æ–∫', '–°—á—ë—Ç', '–í—Å–µ–≥–æ –∏–≥—Ä', '–ú–µ—Ä–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏', '–ú–µ—Ä–∞ –Ω–µ—Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏']

    for col in lead_df.columns[1:]:
        lead_df[col] = lead_df[col].astype('int')

    import matplotlib.pyplot as plt
    fig_ax= plt.figure()
    fig_ax = sns.heatmap(
            lead_df.set_index('–ò–≥—Ä–æ–∫'), 
            cmap="RdYlGn", 
            annot=True,
            fmt=".0f",
            # center=1600,
            vmin=-15000, vmax=17000,
            cbar=False,
            square=True,
            )
    fig_ax.set(xlabel="", ylabel="")
    fig_ax.xaxis.tick_top()
    plt.xticks(rotation=5)
    fig_ax.figure.savefig("leaderboard.png")
    
    
    markup = make_answer_buttons([
         '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                ])

    bot.send_message(
            message.chat.id, 
            """
    –õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    –ú–µ—Ä–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –æ—Ä–∏–Ω–∏–Ω–∞–ª—å–Ω–µ–µ) - –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∞—à–∏ –≤–∫—É—Å—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Å—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö
    –ú–µ—Ä–∞ –Ω–µ—Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–µ–π) - –≤–µ–ª–∏–∫–∞ –ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–∫–∏–µ –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, 
–∫–∞–∫ –∏ –≤–∞—Å, –Ω–∞–∂–∏–º–∞—è —Å–ª—É—á–∞–π–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            """,
            reply_markup=markup
                    )
    file = open('leaderboard.png', 'rb')
    bot.send_photo(message.chat.id, file, reply_markup=markup)

def launch_404(bot, message):
    markup = make_answer_buttons([
         '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                ])

    bot.send_message(
            message.chat.id, 
            """
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.
–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∞–º–æ–π –∏–≥—Ä–µ. 
–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É.
–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ /start
            """,
            reply_markup=markup
                    )

@bot.message_handler(commands=["start"])
def launch_main_menu(message):
    markup = make_answer_buttons([
         '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
         '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –∫–Ω–∏–≥',
         '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤',
         '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                                ])
    
    # start session logging only on the start of session
    if (message.text.strip() == '/start'):
        make_event_log(message, 'session_start', '')

    bot.send_message(
        message.chat.id, 
        """
–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É!
–£–∑–Ω–∞–µ–º –∫–æ–µ-—á—Ç–æ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∏ –æ —Ç–æ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π
        """,
        reply_markup=markup
                )
    # sending_alive_message(60 * 30)

@bot.message_handler(content_types=["text"])
def handle_text(message):
    make_event_log(message, 'button_click', '{Button_name: '+ message.text.strip() +'}')

    if message.text.strip() in '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É':
        try:
            choise_category(bot, message) 
        except:
            launch_404(bot, message)
    elif message.text.strip() == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –∫–Ω–∏–≥':
        try:
            launch_ratings(bot, message)
        except:
            launch_404(bot, message)
    elif message.text.strip() == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤':
        try:
            launch_leaderboard(bot, message)
        except:
            launch_404(bot, message)
    elif message.text.strip() == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
        try:
            launch_personal_stat(bot, message)
        except:
            launch_404(bot, message)
    elif message.text.strip() == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        try:
            launch_main_menu(message)
        except:
            launch_404(bot, message)
    elif (message.text.strip() in topics_lst):
        # if it begining, we shold get new topic
        global topic
        global battle1
        global battle2
        topic = message.text
        try:
            topic, battle1, battle2 = start_game(bot, message, topic)
        except:
            launch_404(bot, message)
    elif (message.text.strip() == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'):
        try:
            # if we are plaing, we should keep topic from last rounds
            topic, battle1, battle2 = start_game(bot, message, topic)
        except:
            launch_404(bot, message)
    elif message.text.strip() in [battle1, battle2]:
        try:
            if (message.text.strip() == battle1):
                result = 0
            elif (message.text.strip() == battle2):
                result = 1
            else:
                result = -1
            finish_game(bot, message, battle1, battle2, result)
        except Exception as e:
            print(str(e))
            launch_404(bot, message)
    elif message.text.strip() in ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']:
        skip_game(bot, message)
    else:
        try:
            launch_404(bot, message)
        except:
            bot.send_message(chat_id=249792088, text="–û–ø—è—Ç—å –∫–∞–∫–∞—è-—Ç–æ —Ö—Ä–µ–Ω—å")

bot.polling(none_stop=True, interval=0)